# !/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot, wikipedia, datetime, sqlite3, requests, random
import numpy as np
from bs4 import BeautifulSoup

bot = telebot.TeleBot('5740263278:AAFTyI5d5q5DyT5SwiH6yfGOQHKeazR26EU')
namebot = '–ï–≤–∞'
wikipedia.set_lang('ru')
today_date = datetime.date.today()
date_and_time = datetime.datetime.now().strftime('%H.%M.%S : %d-%m-%Y')
conn = sqlite3.connect('db/evadatabase.db', check_same_thread=False)
cursor = conn.cursor()
holidays = []
result_holidays = ''


# –û—Ç—Å—á–µ—Ç –¥–Ω–µ–π
def count_day(dat):
    try:
        current_date = str(datetime.date.today()).split('-')
        date_bd = str(dat).split('-')
        count_now = 0
        count_bd = 0
        year_now = current_date[0].strip()
        year_bd = date_bd[0].strip()
        month_now = current_date[1].strip()
        month_bd = date_bd[1].strip()
        day_now = current_date[2].strip()
        day_bd = date_bd[2].strip()
        if year_now == year_bd:
            if month_now == month_bd:
                if day_now == day_bd:
                    return '–£–∂–µ —Å–µ–≥–æ–¥–Ω—è! üéÇ'
                elif day_now < day_bd:
                    count_now = int(day_now)
                    count_bd = int(day_bd)
                    ret = f'–û—Å—Ç–∞–ª–æ—Å—å {count_bd - count_now} –¥–Ω—è/–¥–Ω–µ–π'
                    return ret
                elif day_now > day_bd:
                    return '–°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ! üòû'
            elif month_now > month_bd:
                return '–°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ! üòû'
            elif month_now < month_bd:
                ret = f'–í —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ'
                return ret
        elif year_now > year_bd:
            return '–°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ! üòû'
        elif year_now < year_bd:
            return '–ï—â–µ –Ω–µ —Å–∫–æ—Ä–æ!'
    except Exception:
        return '–î–∞—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ü´†'


# –†–∞—Å—Å—ã–ª–∫–∞
results = cursor.execute('SELECT chat_id FROM chats_id').fetchall()
total_results = []

# –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
url = 'https://my-calend.ru/holidays'
response = requests.get(url)
bs = BeautifulSoup(response.text, 'lxml')
temp = bs.find(class_='holidays-items')
for item in temp:
    holidays.append(item.text)
temp2 = bs.find(class_='holidays-name-days')
for check in holidays:
    word = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç',
            '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è', '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–Å',
            '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™',
            '–´', '–¨', '–≠', '–Æ', '–Ø']
    if len(check) > 3:
        for double_check in check:
            if double_check in word:
                result_holidays += double_check
            elif double_check == ' ':
                result_holidays += ' '
        result_holidays += '\n'


# –ü–æ–≥–æ–¥–∞
def weather(city):
    fin_city = ''
    cit = np.array(city)
    for wwwa in cit:
        fin_city += wwwa
    fin_city = str(fin_city).replace('_', '/')
    weather_result = ''
    url_weather = f'https://world-weather.ru/pogoda/{fin_city}/'
    response2 = requests.get(url_weather)
    bs2 = BeautifulSoup(response2.text, 'lxml')
    temp_weather = bs2.find(id="defSet-2")
    finish = str(temp_weather.text)
    count = 0
    for check_words in finish:
        words = ['–ê', '–ë', '–í', '–ì', '–î', '–ï', '–Å', '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü',
                 '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠', '–Æ', '–Ø']
        if count < 5:
            if check_words in words:
                if count < 4:
                    weather_result += '\n' + check_words
                count += 1
            else:
                weather_result += check_words
    return weather_result


# –ì–æ—Ä–æ—Å–∫–æ–ø
# –û–≤–µ–Ω
def oven():
    url_goroskop_oven = 'https://horo.mail.ru/prediction/aries/today/'
    response_oven = requests.get(url_goroskop_oven)
    bs_oven = BeautifulSoup(response_oven.text, 'lxml')
    oven = bs_oven.find(class_='article__text')
    return oven.text


# –¢–µ–ª–µ—Ü
def telec():
    url_goroskop_telec = 'https://horo.mail.ru/prediction/taurus/today/'
    response_telec = requests.get(url_goroskop_telec)
    bs_telec = BeautifulSoup(response_telec.text, 'lxml')
    telec = bs_telec.find(class_='article__text')
    return telec.text


# –ë–ª–∏–∑–Ω–µ—Ü—ã
def blizn():
    url_goroskop_blizn = 'https://horo.mail.ru/prediction/gemini/today/'
    response_blizn = requests.get(url_goroskop_blizn)
    bs_blizn = BeautifulSoup(response_blizn.text, 'lxml')
    blizn = bs_blizn.find(class_='article__text')
    return blizn.text


# –†–∞–∫
def rak():
    url_goroskop_rak = 'https://horo.mail.ru/prediction/cancer/today/'
    response_rak = requests.get(url_goroskop_rak)
    bs_rak = BeautifulSoup(response_rak.text, 'lxml')
    rak = bs_rak.find(class_='article__text')
    return rak.text


# –õ–µ–≤
def lev():
    url_goroskop_lev = 'https://horo.mail.ru/prediction/leo/today/'
    response_lev = requests.get(url_goroskop_lev)
    bs_lev = BeautifulSoup(response_lev.text, 'lxml')
    lev = bs_lev.find(class_='article__text')
    return lev.text


# –î–µ–≤–∞
def deva():
    url_goroskop_deva = 'https://horo.mail.ru/prediction/virgo/today/'
    response_deva = requests.get(url_goroskop_deva)
    bs_deva = BeautifulSoup(response_deva.text, 'lxml')
    deva = bs_deva.find(class_='article__text')
    return deva.text


# –í–µ—Å—ã
def vesi():
    url_goroskop_vesi = 'https://horo.mail.ru/prediction/libra/today/'
    response_vesi = requests.get(url_goroskop_vesi)
    bs_vesi = BeautifulSoup(response_vesi.text, 'lxml')
    vesi = bs_vesi.find(class_='article__text')
    return vesi.text


# –°–∫–æ—Ä–ø–∏–æ–Ω
def scorpion():
    url_goroskop_scorp = 'https://horo.mail.ru/prediction/scorpio/today/'
    response_scorp = requests.get(url_goroskop_scorp)
    bs_scorp = BeautifulSoup(response_scorp.text, 'lxml')
    scorp = bs_scorp.find(class_='article__text')
    return scorp.text


# –°—Ç—Ä–µ–ª–µ—Ü
def strelec():
    url_goroskop_strel = 'https://horo.mail.ru/prediction/sagittarius/today/'
    response_strel = requests.get(url_goroskop_strel)
    bs_strel = BeautifulSoup(response_strel.text, 'lxml')
    strel = bs_strel.find(class_='article__text')
    return strel.text


# –ö–æ–∑–µ—Ä–æ–≥
def kozerog():
    url_goroskop_koz = 'https://horo.mail.ru/prediction/capricorn/today/'
    response_koz = requests.get(url_goroskop_koz)
    bs_koz = BeautifulSoup(response_koz.text, 'lxml')
    koz = bs_koz.find(class_='article__text')
    return koz.text


# –í–æ–¥–æ–ª–µ–π
def vodoley():
    url_goroskop_vodol = 'https://horo.mail.ru/prediction/aquarius/today/'
    response_vodol = requests.get(url_goroskop_vodol)
    bs_vodol = BeautifulSoup(response_vodol.text, 'lxml')
    vodol = bs_vodol.find(class_='article__text')
    return vodol.text


# –†—ã–±—ã
def ribi():
    url_goroskop_fish = 'https://horo.mail.ru/prediction/pisces/today/'
    response_fish = requests.get(url_goroskop_fish)
    bs_fish = BeautifulSoup(response_fish.text, 'lxml')
    fish = bs_fish.find(class_='article__text')
    return fish.text


# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
morning_cartoon = ['üíê', 'üå∑', 'üåπ', 'ü™∑', 'üå∫', 'üå∏', 'üåº', 'üåª']
result_morning_cartoon = random.choice(morning_cartoon)
for aa in results:
    np.array(aa)
    total_results.append(aa)
for messages in total_results:
    a = cursor.execute(f'SELECT id, user_name, event, date '
                       f'FROM evabase WHERE chat_id= {messages[0]}').fetchall()
    aa = []
    for recurse in a:
        aa.append(recurse)
    bb = np.array(aa)
    result_events = ''
    for res_ev in bb:
        check_days = count_day(res_ev[3])
        result_events += str(res_ev[0]) + ' ' + str(res_ev[1]) + ' ' + str(res_ev[2]) + \
                         ' ' + str(res_ev[3]) + ' | ' + str(check_days) + '\n'
    check_events = result_events
    if temp2 is None:
        bot.send_message(messages[0], f'<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>{result_morning_cartoon}\n'
                                      f'<b>–°–µ–≥–æ–¥–Ω—è:</b> {today_date}\n'
                                      f'<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:</b>üéÇ\n'
                                      f'{result_holidays}\n', parse_mode='html')
    else:
        bot.send_message(messages[0], f'<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>{result_morning_cartoon}\n'
                                      f'<b>–°–µ–≥–æ–¥–Ω—è:</b> {today_date}\n'
                                      f'<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:</b>üéÇ\n'
                                      f'{result_holidays}'
                                      f'\n{temp2.text}\n', parse_mode='html')
    try:
        awggawawg = cursor.execute(f'SELECT city FROM chats_id WHERE chat_id ={messages[0]}').fetchone()
        check_awg = np.array(awggawawg)
        hggg = weather(awggawawg)
        bot.send_message(messages[0], f'<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {check_awg}:</b>üåÖ\n{hggg}\n'
                                      f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É/–≥–æ—Ä–æ–¥ –Ω–∞–ø–∏—à–∏—Ç–µ "–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"',
                         parse_mode='html')
    except Exception:
        bot.send_message(messages[0], '–í—ã–±—Ä–∞–Ω–Ω—ã–π –í–∞–º–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ '
                                      '–Ω–∞–ø–∏—Å–∞–≤ <b>–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b>', parse_mode='html')
    pull_goro = cursor.execute(f'SELECT goro FROM chats_id WHERE chat_id={messages[0]}').fetchall()
    finish_goro = np.array(pull_goro)
    goroscop = ''
    goroscop2 = ''
    for check_goro in finish_goro[0]:
        two = str(check_goro).split(',')
        for _ in range(len(two)):
            if 'oven' in two:
                goroscop += '–û–≤–µ–Ω:‚ôà' + '\n' + oven() + '\n'
                two.remove('oven')
            elif 'telec' in two:
                goroscop += '–¢–µ–ª–µ—Ü:‚ôâ' + '\n' + telec() + '\n'
                two.remove('telec')
            elif 'blizn' in two:
                goroscop += '–ë–ª–∏–∑–Ω–µ—Ü—ã:‚ôä' + '\n' + blizn() + '\n'
                two.remove('blizn')
            elif 'rak' in two:
                goroscop += '–†–∞–∫:‚ôã' + '\n' + rak() + '\n'
                two.remove('rak')
            elif 'lev' in two:
                goroscop += '–õ–µ–≤:‚ôå' + '\n' + lev() + '\n'
                two.remove('lev')
            elif 'deva' in two:
                goroscop += '–î–µ–≤–∞:‚ôç' + '\n' + deva() + '\n'
                two.remove('deva')
            elif 'vesi' in two:
                goroscop2 += '–í–µ—Å—ã:‚ôé' + '\n' + vesi() + '\n'
                two.remove('vesi')
            elif 'scorpion' in two:
                goroscop2 += '–°–∫–æ—Ä–ø–∏–æ–Ω:‚ôè' + '\n' + scorpion() + '\n'
                two.remove('scorpion')
            elif 'strelec' in two:
                goroscop2 += '–°—Ç—Ä–µ–ª–µ—Ü:‚ôê' + '\n' + strelec() + '\n'
                two.remove('strelec')
            elif 'kozerog' in two:
                goroscop2 += '–ö–æ–∑–µ—Ä–æ–≥:‚ôë' + '\n' + kozerog() + '\n'
                two.remove('kozerog')
            elif 'vodoley' in two:
                goroscop2 += '–í–æ–¥–æ–ª–µ–π:‚ôí' + '\n' + vodoley() + '\n'
                two.remove('vodoley')
            elif 'ribi' in two:
                goroscop2 += '–†—ã–±—ã:‚ôì' + '\n' + ribi() + '\n'
                two.remove('ribi')
            elif check_goro == 'vse':
                goroscop += '–û–≤–µ–Ω:‚ôà' + '\n' + oven() + '\n' + '–¢–µ–ª–µ—Ü:‚ôâ' + '\n' + telec() + '\n' + '–ë–ª–∏–∑–Ω–µ—Ü—ã:‚ôä' + '\n' + blizn() + '\n' + '–†–∞–∫:‚ôã' + '\n' + rak() + '\n' + '–õ–µ–≤:‚ôå' + '\n' + lev() + '\n' + '–î–µ–≤–∞:‚ôç' + '\n' + deva() + '\n'
                goroscop2 += '–í–µ—Å—ã:‚ôé' + '\n' + vesi() + '\n' + '–°–∫–æ—Ä–ø–∏–æ–Ω:‚ôè' + '\n' + scorpion() + '\n' + '–°—Ç—Ä–µ–ª–µ—Ü:‚ôê' + '\n' + strelec() + '\n' + '–ö–æ–∑–µ—Ä–æ–≥:‚ôë' + '\n' + kozerog() + '\n' + '–í–æ–¥–æ–ª–µ–π:‚ôí' + '\n' + vodoley() + '\n' + '–†—ã–±—ã:‚ôì' + '\n' + ribi() + '\n '
    if goroscop != '' and goroscop2 != '':
        bot.send_message(messages[0], f'<b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>üå†\n'
                                      f'{goroscop}', parse_mode='html')
        bot.send_message(messages[0], f'\n{goroscop2}\n–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ '
                                      f'–Ω–∞–ø–∏—à–∏—Ç–µ <b>–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏</b>', parse_mode='html')
    elif goroscop != '':
        bot.send_message(messages[0], f'<b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>üå†\n'
                                      f'{goroscop}\n–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ '
                                      f'–Ω–∞–ø–∏—à–∏—Ç–µ <b>–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏</b>', parse_mode='html')
    elif goroscop2 != '':
        bot.send_message(messages[0], f'<b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>üå†\n'
                                      f'{goroscop2}\n–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ '
                                      f'–Ω–∞–ø–∏—à–∏—Ç–µ <b>–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏</b>', parse_mode='html')
    # bot.send_message(messages[0], f'<b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>üå†\n'
    #                               f'<b>–û–≤–µ–Ω:</b>‚ôàÔ∏è\n{oven.text}\n'
    #                               f'<b>–¢–µ–ª–µ—Ü:</b>‚ôâÔ∏è\n{telec.text}\n'
    #                               f'<b>–ë–ª–∏–∑–Ω–µ—Ü—ã:</b>‚ôäÔ∏è\n{blizn.text}\n'
    #                               f'<b>–†–∞–∫:</b>‚ôãÔ∏è\n{rak.text}\n'
    #                               f'<b>–õ–µ–≤:</b>‚ôåÔ∏è\n{lev.text}\n'
    #                               f'<b>–î–µ–≤–∞:</b>‚ôçÔ∏è\n{deva.text}\n', parse_mode='html')
    # bot.send_message(messages[0], f'<b>–í–µ—Å—ã:</b>‚ôéÔ∏è\n{vesi.text}\n'
    #                               f'<b>–°–∫–æ—Ä–ø–∏–æ–Ω:</b>‚ôèÔ∏è\n{scorp.text}\n'
    #                               f'<b>–°—Ç—Ä–µ–ª–µ—Ü:</b>‚ôêÔ∏è\n{strel.text}\n'
    #                               f'<b>–ö–æ–∑–µ—Ä–æ–≥:</b>‚ôëÔ∏è\n{koz.text}\n'
    #                               f'<b>–í–æ–¥–æ–ª–µ–π:</b>‚ôíÔ∏è\n{vodol.text}\n'
    #                               f'<b>–†—ã–±—ã:</b>‚ôìÔ∏è\n{fish.text}\n', parse_mode='html')
    check_events_two = check_events.replace(' ', '')
    if check_events_two != '':
        bot.send_message(messages[0], '<b>–°–æ–±—ã—Ç–∏—è –≤ –í–∞—à–µ–º —á–∞—Ç–µ:</b>\n'
                                      '<b>ID —Å–æ–±—ã—Ç–∏—è:</b>  <b>–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ:</b>  '
                                      '<b>–¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:</b>  <b>–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:</b>\n'
                                      f'{result_events}', parse_mode='html')
    else:
        bot.send_message(messages[0], '–°–æ–±—ã—Ç–∏—è –≤ –í–∞—à–µ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n'
                                      '–î–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ï–≤–∞, —Å–æ–±—ã—Ç–∏—è</b>', parse_mode='html')
total_results.clear()
