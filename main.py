import telebot, wikipedia, random, datetime, sqlite3, math
from googlesearch import search
from telebot import types
import numpy as np


def main():
    bot = telebot.TeleBot('5740263278:AAFTyI5d5q5DyT5SwiH6yfGOQHKeazR26EU')
    namebot = '–ï–≤–∞'
    wikipedia.set_lang('ru')
    date_and_time = datetime.datetime.now().strftime('%H.%M.%S : %d-%m-%Y')
    conn = sqlite3.connect('db/evadatabase.db', check_same_thread=False)
    cursor = conn.cursor()

    def add_chat(chat_id: int):
        cursor.execute('INSERT INTO chats_id (chat_id, events) VALUES(?, ?)', (chat_id, None))
        conn.commit()

    def delete_chat(chat_id):
        cursor.execute(f'DELETE FROM chats_id WHERE chat_id={chat_id}')
        conn.commit()

    def new_event(user_id: int, user_name: str, event: str, date: str, chat_id: str):
        cursor.execute('INSERT INTO evabase (user_id, user_name, event, date, chat_id) '
                       'VALUES(?, ?, ?, ?, ?)', (user_id, user_name, event, date, chat_id))
        conn.commit()

    @bot.message_handler(commands=['help'])
    def send_comands(message):
        bot.send_message(message.chat.id, '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
                                          'üìî–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ Wikipedia, –≤–≤–µ–¥–∏—Ç–µ <b>/–ù–∞–π–¥–∏ (–æ–±—ä–µ–∫—Ç)</b>\n'
                                          'üåê–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ <b>–ï–≤–∞ –∏—â–∏ (–ø—Ä–µ–¥–º–µ—Ç –ø–æ–∏—Å–∫–∞)</b>\n'
                                          'üìÖ–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ï–≤–∞, –¥–∞—Ç–∞</b> '
                                          '–∏–ª–∏ <b>–ï–≤–∞, –≤—Ä–µ–º—è</b>\n'
                                          '–í—ã —Ç–∞–∫ –∂–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –º–æ—ë –º–Ω–µ–Ω–∏–µ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ '
                                          '–Ω–∞–ø–∏—Å–∞—Ç—å <b>–ï–≤–∞ (1 –≤–∞—Ä–∏–∞–Ω—Ç) –∏–ª–∏ (2 –≤–∞—Ä–∏–∞–Ω—Ç)</b>\n'
                                          'üóÇ–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "<b>–ï–≤–∞, —Å–æ–±—ã—Ç–∏—è</b>"\n'
                                          'üìù–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "<b>–ï–≤–∞, –¥–æ–±–∞–≤—å —á–∞—Ç</b>"\n'
                                          '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞,'
                                          ' –Ω–∞–ø–∏—à–∏—Ç–µ <b>–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏</b>\n'
                                          'üèò–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b>\n'
                                          'üì±–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞/–ø–ª–æ—â–∞–¥–∏/–æ–±—ä–µ–º–∞. '
                                          '–î–ª—è –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "<b>–ï–≤–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞</b>"\n'
                                          'üì®<b>–ú–æ–π –∫–∞–Ω–∞–ª, –≥–¥–µ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –∏ —É–∑–Ω–∞—Ç—å '
                                          '–Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: @EvaBotSupport </b>', parse_mode='html')

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        bot.send_message(message.chat.id, "<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞. –Ø —á–∞—Ç-–±–æ—Ç</b>üëã\n"
                                          "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /help\n"
                                          "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ,"
                                          "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –∏ –≤–Ω–µ—Å—Ç–∏ "
                                          "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è @EvaBotSupport üå∑\n"
                                          "–í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–±–æ–∏ –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ, –Ω–æ —è –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å.",
                         parse_mode='html')
        bot.send_message(message.chat.id,
                         '–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "<b>–ï–≤–∞, –¥–æ–±–∞–≤—å —á–∞—Ç</b>"üìù\n\n'
                         '–¢—É–¥–∞ –≤—Ö–æ–¥—è—Ç:\n'
                         '<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏</b>üéÇ\n'
                         '<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>‚òÄÔ∏è\n'
                         '<b>–ì–æ—Ä–æ—Å–∫–æ–ø—ã</b>üå†\n'
                         '<b>–°–æ–±—ã—Ç–∏—è —á–∞—Ç–∞</b>üìÜ\n\n'
                         '–ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ "–ï–≤–∞, —É–¥–∞–ª–∏ —á–∞—Ç"\n\n'
                         f'ID –í–∞—à–µ–≥–æ —á–∞—Ç–∞: <b>{message.chat.id}</b>', parse_mode='html')

    def wikisearch(word):
        try:
            result = wikipedia.summary(word)
            return result
        except Exception as e:
            return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'

    @bot.message_handler(commands=['–ù–∞–π–¥–∏'], content_types=['text'])
    def searchwiki(message):
        bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫')
        word = str(message).lower().split(' ')
        bot.send_message(message.chat.id, wikisearch(word))

    def mathem(message):
        kb = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton('–ü–µ—Ä–∏–º–µ—Ç—Ä', callback_data='perim')
        kb.add(but1)
        but2 = types.InlineKeyboardButton('–ü–ª–æ—â–∞–¥—å', callback_data='plosh')
        kb.add(but2)
        but3 = types.InlineKeyboardButton('–û–±—ä–µ–º', callback_data='obj')
        kb.add(but3)
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å?', reply_markup=kb)

    def events_chat(message):
        kb = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data='show_all')
        kb.add(but1)
        but2 = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data='create_event')
        kb.add(but2)
        but3 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data='delete_event')
        kb.add(but3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb)

    list_goro = []

    def choise_goro(message):
        show_goro = cursor.execute(f'SELECT goro FROM chats_id WHERE chat_id={message.chat.id}').fetchall()
        result_goro = np.array(show_goro)
        kb = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton('–û–≤–µ–Ω', callback_data='oven')
        but2 = types.InlineKeyboardButton('–¢–µ–ª–µ—Ü', callback_data='telec')
        but3 = types.InlineKeyboardButton('–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='blizn')
        kb.add(but1, but2, but3)
        but4 = types.InlineKeyboardButton('–†–∞–∫', callback_data='rak')
        but5 = types.InlineKeyboardButton('–õ–µ–≤', callback_data='lev')
        but6 = types.InlineKeyboardButton('–î–µ–≤–∞', callback_data='deva')
        kb.add(but4, but5, but6)
        but7 = types.InlineKeyboardButton('–í–µ—Å—ã', callback_data='vesi')
        but8 = types.InlineKeyboardButton('–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='scorpion')
        but9 = types.InlineKeyboardButton('–°—Ç—Ä–µ–ª–µ—Ü', callback_data='strelec')
        kb.add(but7, but8, but9)
        but10 = types.InlineKeyboardButton('–ö–æ–∑–µ—Ä–æ–≥', callback_data='kozerog')
        but11 = types.InlineKeyboardButton('–í–æ–¥–æ–ª–µ–π', callback_data='vodoley')
        but12 = types.InlineKeyboardButton('–†—ã–±—ã', callback_data='ribi')
        kb.add(but10, but11, but12)
        but13 = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='accept')
        kb.add(but13)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫–∏ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:\n'
                                          f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏: <b>{result_goro}</b>', reply_markup=kb, parse_mode='html')

    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        if call.data == "show_all":
            show_result = cursor.execute(f'SELECT id, user_name, event, date '
                                         f'FROM evabase WHERE chat_id={call.message.chat.id}').fetchall()
            total_show_result = []
            for recurse in show_result:
                total_show_result.append(recurse)
            end_result = np.array(total_show_result)
            result_end = ''
            for res_ev in end_result:
                result_end += str(res_ev[0]) + ' ' + str(res_ev[1]) + ' ' + str(res_ev[2]) + ' ' + str(
                    res_ev[3]) + '\n'
            bot.send_message(chat_id=call.message.chat.id, text=f'–í–æ—Ç –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞:\n'
                                                                f'<b>ID —Å–æ–±—ã—Ç–∏—è:</b>  <b>–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ:</b>  '
                                                                f'<b>–¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:</b>  <b>–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:</b>\n'
                                                                f'{result_end}', parse_mode='html')
            total_show_result.clear()
        elif call.data == "create_event":
            bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.\n'
                                                   '<b>–í–ù–ò–ú–ê–ù–ò–ï</b>‚ÄºÔ∏è\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Ç–æ–º "!" –ø–æ—Å–ª–µ —á–µ–≥–æ '
                                                   '–¥–∞—Ç—É '
                                                   '<b>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)</b>'
                                                   '. –í –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É.\n<b>–ü—Ä–∏–º–µ—Ä:</b> –°–æ–±—ã—Ç–∏–µ ! –¥–∞—Ç–∞',
                             parse_mode='html')
            bot.register_next_step_handler(call.message, add_new_event)
        elif call.data == 'delete_event':
            show_result = cursor.execute(f'SELECT id, user_name, event, date '
                                         f'FROM evabase WHERE chat_id={call.message.chat.id}').fetchall()
            total_show_result = []
            for recurse in show_result:
                total_show_result.append(recurse)
            end_result = np.array(total_show_result)
            result_end = ''
            for res_ev in end_result:
                result_end += str(res_ev[0]) + ' ' + str(res_ev[1]) + ' ' + str(res_ev[2]) + ' ' + str(
                    res_ev[3]) + '\n'
            bot.send_message(chat_id=call.message.chat.id, text=f'–í–æ—Ç –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞:\n'
                                                                f'<b>ID —Å–æ–±—ã—Ç–∏—è:</b>  <b>–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ:</b>  '
                                                                f'<b>–¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:</b>  <b>–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:</b>\n'
                                                                f'{result_end}\n\n'
                                                                f'–ù–∞–ø–∏—à–∏—Ç–µ <b>ID</b> —Å–æ–±—ã—Ç–∏—è, '
                                                                f'–∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', parse_mode='html')
            bot.register_next_step_handler(call.message, delete_event)
        elif call.data == 'perim':
            kb = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton('–ö–≤–∞–¥—Ä–∞—Ç', callback_data='perim_sqare')
            kb.add(but1)
            but2 = types.InlineKeyboardButton('–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', callback_data='perim_treug')
            kb.add(but2)
            but3 = types.InlineKeyboardButton('–ö—Ä—É–≥', callback_data='perim_roll')
            kb.add(but3)
            but4 = types.InlineKeyboardButton('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', callback_data='perim_pryamo')
            kb.add(but4)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ '
                                                                '–ø–µ—Ä–∏–º–µ—Ç—Ä–∞:', reply_markup=kb)
        elif call.data == 'perim_sqare':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É <b>–∫–≤–∞–¥—Ä–∞—Ç–∞</b>, –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, perim_sq)
        elif call.data == 'perim_treug':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã <b>—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é '
                                       '–≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, perim_treug)
        elif call.data == 'perim_roll':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å <b>–∫—Ä—É–≥–∞</b> '
                                       '–≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, perim_roll)
        elif call.data == 'perim_pryamo':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã <b>–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> '
                                       ' —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, perim_pryamo)
        elif call.data == 'plosh':
            kb = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton('–ö–≤–∞–¥—Ä–∞—Ç', callback_data='plosh_sqare')
            kb.add(but1)
            but2 = types.InlineKeyboardButton('–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', callback_data='plosh_treug')
            kb.add(but2)
            but3 = types.InlineKeyboardButton('–ö—Ä—É–≥', callback_data='plosh_roll')
            kb.add(but3)
            but4 = types.InlineKeyboardButton('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', callback_data='plosh_pryamo')
            kb.add(but4)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ '
                                                                '–ø–ª–æ—â–∞–¥–∏:', reply_markup=kb)
        elif call.data == 'plosh_sqare':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É <b>–∫–≤–∞–¥—Ä–∞—Ç–∞</b> –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_sqare)
        elif call.data == 'plosh_treug':
            kb = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—Å–æ—Ç–∞', callback_data='plosh_treug_1')
            kb.add(but1)
            but2 = types.InlineKeyboardButton('–î–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —É–≥–æ–ª', callback_data='plosh_treug_2')
            kb.add(but2)
            but3 = types.InlineKeyboardButton('–§–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞', callback_data='plosh_treug_3')
            kb.add(but3)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.message.chat.id, text='–ü–æ –∫–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª–µ —Å—á–∏—Ç–∞—Ç—å?', reply_markup=kb)
        elif call.data == 'plosh_treug_1':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—Å–æ—Ç—É <b>—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>'
                                       '—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_treug_1)
        elif call.data == 'plosh_treug_2':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã <b>—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b> '
                                       '–∏ —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_treug_2)
        elif call.data == 'plosh_treug_3':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—ã <b>—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_treug_3)
        elif call.data == 'plosh_roll':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å <b>–∫—Ä—É–≥–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_roll)
        elif call.data == 'plosh_pryamo':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã <b>–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:', parse_mode='html')
            bot.register_next_step_handler(call.message, plosh_pryamo)
        elif call.data == 'obj':
            kb = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton('–ö—É–±', callback_data='obj_kub')
            kb.add(but1)
            but2 = types.InlineKeyboardButton('–ö–æ–Ω—É—Å', callback_data='obj_konus')
            kb.add(but2)
            but3 = types.InlineKeyboardButton('–®–∞—Ä', callback_data='obj_roll')
            kb.add(but3)
            but4 = types.InlineKeyboardButton('–ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥', callback_data='obj_parall')
            kb.add(but4)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ '
                                                                '–æ–±—ä–µ–º–∞:', reply_markup=kb)
        elif call.data == 'obj_kub':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É <b>–∫—É–±–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, obj_kub)
        elif call.data == 'obj_konus':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –æ—Å–Ω–æ–≤–∞–Ω–∏—è <b>–∫–æ–Ω—É—Å–∞</b> –∏ '
                                       '–≤—ã—Å–æ—Ç—É –≤ <b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:', parse_mode='html')
            bot.register_next_step_handler(call.message, obj_konus)
        elif call.data == 'obj_roll':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å <b>—à–∞—Ä–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>:', parse_mode='html')
            bot.register_next_step_handler(call.message, obj_roll)
        elif call.data == 'obj_parall':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Ä–µ–±—Ä–∞ <b>–ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–∞</b> –≤ '
                                       '<b>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b> –≤—ã—Ö–æ–¥—è—â–∏—Ö –∏–∑ –æ–¥–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã:', parse_mode='html')
            bot.register_next_step_handler(call.message, obj_parall)
        elif call.data == 'oven':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–û–≤–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–û–≤–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'telec':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–¢–µ–ª–µ—Ü —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–¢–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'blizn':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–ë–ª–∏–∑–Ω–µ—Ü—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–ë–ª–∏–∑–Ω–µ—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'rak':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–†–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–†–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'lev':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–õ–µ–≤ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–õ–µ–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'deva':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–î–µ–≤–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–î–µ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'vesi':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–í–µ—Å—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–í–µ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'scorpion':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–°–∫–æ—Ä–ø–∏–æ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–°–∫–æ—Ä–ø–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'strelec':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–°—Ç—Ä–µ–ª–µ—Ü —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–°—Ç—Ä–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'kozerog':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–ö–æ–∑–µ—Ä–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–ö–æ–∑–µ—Ä–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'vodoley':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–í–æ–¥–æ–ª–µ–π —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–í–æ–¥–æ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'ribi':
            if call.data in list_goro:
                list_goro.remove(call.data)
                bot.send_message(call.message.chat.id, '–†—ã–±—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ùå')
            else:
                list_goro.append(call.data)
                bot.send_message(call.message.chat.id, '–†—ã–±—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ')
        elif call.data == 'accept':
            push_goro = ''
            for push in list_goro:
                push_goro += push + ','
            cursor.execute(f'UPDATE chats_id SET goro="{push_goro}" WHERE chat_id={call.message.chat.id}')
            conn.commit()
            list_goro.clear()
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

    def perim_sq(message):
        pre_num = str(message.text).replace(' ', '')
        if pre_num.isdigit():
            num = int(pre_num)
            p = (4 * num).__round__(3)
            bot.send_message(message.chat.id, f'–ü–µ—Ä–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π <b>{num}</b> —Ä–∞–≤–µ–Ω:'
                                              f'\n<b>{p} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def perim_treug(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit() and check[2].isdigit():
            if len(check) != 3:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                num3 = int(check[2])
                p = (num1 + num2 + num3).__round__(3)
                bot.send_message(message.chat.id, f'–ü–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ '
                                                  f'<b>{num1}</b>, <b>{num2}</b> –∏ <b>{num3}</b> '
                                                  f'—Ä–∞–≤–µ–Ω <b>{p} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def perim_roll(message):
        pre_num = str(message.text).replace(' ', '')
        if pre_num.isdigit():
            num = int(pre_num)
            p = (2 * math.pi * num).__round__(3)
            bot.send_message(message.chat.id, f'–ü–µ—Ä–∏–º–µ—Ç—Ä –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º <b>{num}</b> '
                                              f'—Ä–∞–≤–µ–Ω <b>{p} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def perim_pryamo(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit():
            if len(check) != 2:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                p = (2 * (num1 + num2)).__round__(3)
                bot.send_message(message.chat.id, '–ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ '
                                                  f'<b>{num1}</b> –∏ <b>{num2}</b> —Ä–∞–≤–µ–Ω <b>{p} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>',
                                 parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_sqare(message):
        check = str(message.text).replace(' ', '')
        if check.isdigit():
            num1 = int(check)
            s = (num1 ** 2).__round__(3)
            bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞–¥—å –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ <b>{num1}</b> '
                                              f'—Ä–∞–≤–Ω–∞ <b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_treug_1(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit():
            if len(check) != 2:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                s = (0.5 * num1 * num2).__round__(3)
                bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º <b>{num1}</b> '
                                                  f'–∏ –≤—ã—Å–æ—Ç–æ–π <b>{num2}</b> —Ä–∞–≤–Ω–∞ <b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>',
                                 parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_treug_2(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit() and check[2].isdigit():
            if len(check) != 3:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                num3 = int(check[2])
                s = (0.5 * num1 * num2 * math.sin(num3)).__round__(3)
                bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ <b>{num1}</b>'
                                                  f' –∏ <b>{num2}</b> –∏ —É–≥–ª–æ–º <b>{num3}</b> —Ä–∞–≤–Ω–∞ '
                                                  f'<b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_treug_3(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit() and check[2].isdigit():
            if len(check) != 3:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                try:
                    num1 = int(check[0])
                    num2 = int(check[1])
                    num3 = int(check[2])
                    p = (num1 + num2 + num3) / 2
                    s = (math.sqrt(p * (p - num1) * (p - num2) * (p - num3))).__round__(3)
                    bot.send_message(message.chat.id, f'–ü–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ <b>{num1}</b>, '
                                                      f'<b>{num2}</b>, –∏ <b>{num3}</b> —Ä–∞–≤–µ–Ω <b>{p} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>\n'
                                                      f'–ü–ª–æ—â–∞–¥—å —Ä–∞–≤–Ω–∞ <b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
                except Exception:
                    bot.send_message(message.chat.id, '–ü–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, '
                                                      '–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º—É–ª–æ–π.')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_roll(message):
        check = str(message.text).replace(' ', '')
        if check.isdigit():
            num1 = int(check)
            s = (math.pi * num1 ** 2).__round__(3)
            bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º <b>{num1}</b> '
                                              f'—Ä–∞–≤–Ω–∞ <b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def plosh_pryamo(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit():
            if len(check) != 2:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                s = (num1 * num2).__round__(3)
                bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ '
                                                  f'—Å—Ç–æ—Ä–æ–Ω–∞–º–∏ <b>{num1}</b> –∏ <b>{num2}</b> —Ä–∞–≤–Ω–∞ '
                                                  f'<b>{s} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def obj_kub(message):
        check = str(message.text).replace(' ', '')
        if check.isdigit():
            num1 = int(check)
            v = (num1 ** 3).__round__(3)
            bot.send_message(message.chat.id, f'–û–±—ä–µ–º –∫—É–±–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π <b>{num1}</b> '
                                              f'—Ä–∞–≤–µ–Ω <b>{v} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def obj_konus(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit():
            if len(check) != 2:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                v = ((1 / 3) * math.pi * num1 ** 2 * num2).__round__(3)
                bot.send_message(message.chat.id, f'–û–±—ä–µ–º –∫–æ–Ω—É—Å–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º –æ—Å–Ω–æ–≤–∞–Ω–∏—è <b>{num1}</b> '
                                                  f'–∏ –≤—ã—Å–æ—Ç–æ–π <b>{num2}</b> —Ä–∞–≤–µ–Ω <b>{v} '
                                                  f'—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def obj_roll(message):
        check = str(message.text).replace(' ', '')
        if check.isdigit():
            num1 = int(check)
            v = ((4 / 3) * math.pi * num1 ** 3).__round__(3)
            bot.send_message(message.chat.id, f'–û–±—ä–µ–º —à–∞—Ä–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º <b>{num1}</b> '
                                              f'—Ä–∞–≤–µ–Ω <b>{v} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    def obj_parall(message):
        check = str(message.text).replace(' ', '').split(',')
        if check[0].isdigit() and check[1].isdigit() and check[2].isdigit():
            if len(check) != 3:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞')
            else:
                num1 = int(check[0])
                num2 = int(check[1])
                num3 = int(check[2])
                v = (num1 * num2 * num3).__round__(3)
                bot.send_message(message.chat.id, f'–û–±—ä–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–∞ —Å —Ä–µ–±—Ä–∞–º–∏ '
                                                  f'<b>{num1}, {num2}</b> –∏ <b>{num3}</b> '
                                                  f'—Ä–∞–≤–µ–Ω <b>{v} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–∞')

    @bot.message_handler(content_types=['text'])
    def communication(message):
        user_name = message.from_user.first_name
        user_id = message.from_user.id
        chat_id = message.chat.id
        result = message.text
        if result.startswith("–ï–≤–∞ –∏—â–∏") or result.startswith('–ï–≤–∞, –∏—â–∏'):
            bot.send_message(message.chat.id, '–ò—â—É...')
            for link in search(result[8::], tld='ru', num=5, stop=5, pause=2):
                bot.send_message(message.chat.id, link)
        elif result == '–ï–≤–∞, —Å–æ–±—ã—Ç–∏—è' or result == '–ï–≤–∞ —Å–æ–±—ã—Ç–∏—è':
            events_chat(message)
        elif result == '–ï–≤–∞, –¥–æ–±–∞–≤—å —á–∞—Ç' or result == '–ï–≤–∞ –¥–æ–±–∞–≤—å —á–∞—Ç':
            try:
                add_chat(chat_id)
                bot.send_message(message.chat.id, '<b>–ì–æ—Ç–æ–≤–æ!</b> –í–∞—à —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫.\n'
                                                  '–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é <b>–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö,'
                                                  ' –ø–æ–≥–æ–¥–µ, –∏ –≥–æ—Ä–æ—Å–∫–æ–ø–µ, —Ç–∞–∫ –∂–µ, –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞</b>.\n'
                                                  '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ "–ï–≤–∞, —Å–æ–±—ã—Ç–∏—è"\n'
                                                  '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–≥–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥, \n'
                                                  '–Ω–∞–ø–∏—à–∏—Ç–µ "<b>–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b>"\n'
                                                  '–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '
                                                  '<b>–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏</b>', parse_mode='html')
            except Exception:
                bot.send_message(message.chat.id, '–í–∞—à —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫')
        elif result == '–ï–≤–∞, —É–¥–∞–ª–∏ —á–∞—Ç' or result == '–ï–≤–∞ —É–¥–∞–ª–∏ —á–∞—Ç':
            try:
                delete_chat(chat_id)
                bot.send_message(message.chat.id, '–í–∞—à —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫')
            except Exception:
                bot.send_message(message.chat.id, '–í–∞—à–µ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏')
        elif result == '–ï–≤–∞':
            answer_list = ['–ê–π?', '–Ø —Ç—É—Ç', '–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?', '–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?', '–°–ª—É—à–∞—é', '–î–∞?',
                           '–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?']
            answer = random.choice(answer_list)
            bot.send_message(message.chat.id, answer)
        elif result == '–ï–≤–∞ –¥–∞—Ç–∞' or result == '–ï–≤–∞ –≤—Ä–µ–º—è' or result == '–ï–≤–∞, –¥–∞—Ç–∞' or result == '–ï–≤–∞, –≤—Ä–µ–º—è':
            bot.send_message(message.chat.id, date_and_time)
        for_choise = str(result).split(' ')
        if len(for_choise) >= 3:
            if for_choise[0] == '–ï–≤–∞' and for_choise[2] == '–∏–ª–∏':
                list_choise = [for_choise[1], for_choise[3]]
                bot.send_message(message.chat.id, f'–Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ –ª—É—á—à–µ {random.choice(list_choise)}')
        elif result == '–ï–≤–∞ –º–æ–ª–æ–¥–µ—Ü' or result == '–ï–≤–∞, –º–æ–ª–æ–¥–µ—Ü':
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –º–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ :)')
        elif result == '–ï–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞' or result == '–ï–≤–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞':
            mathem(message)
        elif result == '–ï–≤–∞, —Å—Ç–∞—Ç–∞' and message.chat.id == 2078991528:
            abc = cursor.execute('SELECT * FROM evabase').fetchall()
            bot.send_message(message.chat.id, '–ë–î:\n'
                                              f'{np.array(abc)}')
            deg = cursor.execute('SELECT * FROM chats_id').fetchall()
            bot.send_message(message.chat.id, '–°–æ–±—ã—Ç–∏—è:\n'
                                              f'{np.array(deg)}')
        elif result == '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ '
                                              '–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ /</b>\n'
                                              '–ü—Ä–∏–º–µ—Ä:\n'
                                              'Russia/Moscow\n'
                                              '–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º',
                             parse_mode='html')
            bot.register_next_step_handler(message, add_city_db)
        elif result == '–í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏' or result == '–≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–∏':
            choise_goro(message)

    def add_city_db(message):
        add_city = str(message.text).lower().replace(' ', '')
        finish_city = add_city.replace('/', '_')
        try:
            cursor.execute(f'UPDATE chats_id SET city="{finish_city}" WHERE chat_id={message.chat.id}')
            conn.commit()
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç '
                                              f'–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ <b>{add_city}</b>', parse_mode='html')
        except Exception:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞')

    def delete_event(message):
        try:
            cursor.execute(f'DELETE FROM evabase WHERE id= {message.text} AND chat_id= {message.chat.id}')
            conn.commit()
            bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ')
        except Exception:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è <b>ID</b>', parse_mode='html')

    def add_new_event(message):
        try:
            us_id = message.from_user.id
            new_event_add = str(message.text).split('!')
            new_event(user_id=us_id, user_name=message.from_user.first_name,
                      event=new_event_add[0], date=new_event_add[1], chat_id=message.chat.id)
            bot.send_message(message.chat.id, '<b>–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>‚úÖ', parse_mode='html')
        except Exception:
            bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞!</b>\n'
                                              '–í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞–∫ "!"', parse_mode='html')

    bot.infinity_polling()


if __name__ == '__main__':
    main()
